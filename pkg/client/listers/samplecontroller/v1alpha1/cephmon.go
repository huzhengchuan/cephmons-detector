/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.io/sample-controller/pkg/apis/samplecontroller/v1alpha1"
)

// CephmonLister helps list Cephmons.
type CephmonLister interface {
	// List lists all Cephmons in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Cephmon, err error)
	// Cephmons returns an object that can list and get Cephmons.
	Cephmons(namespace string) CephmonNamespaceLister
	CephmonListerExpansion
}

// cephmonLister implements the CephmonLister interface.
type cephmonLister struct {
	indexer cache.Indexer
}

// NewCephmonLister returns a new CephmonLister.
func NewCephmonLister(indexer cache.Indexer) CephmonLister {
	return &cephmonLister{indexer: indexer}
}

// List lists all Cephmons in the indexer.
func (s *cephmonLister) List(selector labels.Selector) (ret []*v1alpha1.Cephmon, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Cephmon))
	})
	return ret, err
}

// Cephmons returns an object that can list and get Cephmons.
func (s *cephmonLister) Cephmons(namespace string) CephmonNamespaceLister {
	return cephmonNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CephmonNamespaceLister helps list and get Cephmons.
type CephmonNamespaceLister interface {
	// List lists all Cephmons in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Cephmon, err error)
	// Get retrieves the Cephmon from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Cephmon, error)
	CephmonNamespaceListerExpansion
}

// cephmonNamespaceLister implements the CephmonNamespaceLister
// interface.
type cephmonNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Cephmons in the indexer for a given namespace.
func (s cephmonNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Cephmon, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Cephmon))
	})
	return ret, err
}

// Get retrieves the Cephmon from the indexer for a given namespace and name.
func (s cephmonNamespaceLister) Get(name string) (*v1alpha1.Cephmon, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cephmon"), name)
	}
	return obj.(*v1alpha1.Cephmon), nil
}
